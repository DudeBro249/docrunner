name: Compile Dart Code

on:
  push:
    branches: [ stable ]
# temp test code
  pull_request:
    branches: [ stable ]

jobs:
  build:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-10.15]

    steps:
      - uses: actions/checkout@v2

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
      - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Install dependencies
        run: dart pub get

      - name: Build dart files
        run: dart run build_runner build

      - name: Compile code
        run: dart compile exe bin/main.dart -o bin/docrunner-${{ matrix.os }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: ./bin/docrunner-${{ matrix.os }}*

  release:
    name: Create a github release
    needs: [ build ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - name: Get version
        uses: KJ002/read-yaml@v1.4
        id: version
        with:
          file: ./pubspec.yaml
          key-path: '["version"]'

      - name: Get name
        uses: KJ002/read-yaml@v1.4
        id: name
        with:
          file: ./pubspec.yaml
          key-path: '["name"]'

      - name: Test
        run: ls -lah

      - name: Get changelog
        uses: KJ002/changelog-action@master
        id: changelog
        with:
          file: ./CHANGELOG.md

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.name.outputs.data }}
          tag_name: ${{ steps.version.outputs.data }}
          body: ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/docrunner-ubuntu-20.04
          asset_name: docrunner-linux
          asset_content_type: application/octet-stream

      - name: Upload macOS artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/docrunner-macOS-10.15
          asset_name: docrunner-macOS
          asset_content_type: application/octet-stream

      - name: Upload windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifact/docrunner-windows-2019
          asset_name: docrunner-windows.exe
          asset_content_type: application/x-msdownload
